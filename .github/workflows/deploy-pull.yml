name: Deploy Laravel + React/Vite
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy por SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script_stop: true
          script: |
            set -e  # Detener si hay errores
            
            # Cargar variables de entorno
            source ~/.bashrc 2>/dev/null || true
            source ~/.nvm/nvm.sh 2>/dev/null || true
            
            # Ir al directorio del proyecto
            cd ${{ secrets.PROJECT_PATH }}
            
            echo "üöÄ Iniciando deploy..."
            echo "üìç Directorio actual: $(pwd)"
            
            # Verificar herramientas
            echo "üîç Verificando herramientas..."
            node --version || echo "‚ùå Node.js no encontrado"
            npm --version || echo "‚ùå npm no encontrado"
            composer --version || echo "‚ùå Composer no encontrado"
            
            # Manejar cambios locales de forma m√°s robusta
            echo "üîç Verificando estado del repositorio..."
            if git status --porcelain 2>/dev/null | grep -q .; then
              echo "‚ö†Ô∏è Hay cambios sin commitear, haciendo stash..."
              git stash push --include-untracked -m "Auto-stash before deploy $(date)"
            else
              echo "‚úÖ Repositorio limpio"
            fi
            
            # Git pull con manejo de errores
            echo "üîÑ Actualizando c√≥digo..."
            git fetch origin main
            git checkout main
            git pull origin main
            
            # Obtener archivos cambiados (con fallback)
            CHANGED_FILES=""
            if git rev-parse HEAD~1 >/dev/null 2>&1; then
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
            fi
            
            echo "üìù Archivos cambiados: ${CHANGED_FILES:-"(primer deploy o error detectando cambios)"}"
            
            # Composer - verificar cambios o forzar si no se puede detectar
            if echo "$CHANGED_FILES" | grep -q "composer\.\(json\|lock\)" || [ -z "$CHANGED_FILES" ]; then
              echo "üì¶ Actualizando dependencias de Composer..."
              export COMPOSER_ALLOW_SUPERUSER=1
              composer install --no-dev --optimize-autoloader --no-interaction
            else
              echo "‚úÖ Sin cambios en composer.json/lock"
            fi
            
            # NPM - verificar cambios o forzar si no se puede detectar
            if echo "$CHANGED_FILES" | grep -q "package\(-lock\)\?\.json" || [ -z "$CHANGED_FILES" ]; then
              echo "üì¶ Actualizando dependencias de npm..."
              if [ -f package-lock.json ]; then
                npm ci
              else
                npm install
              fi
            else
              echo "‚úÖ Sin cambios en package.json/lock"
            fi
            
            # Migraciones - con mejor manejo de errores
            echo "üóÑÔ∏è Verificando migraciones..."
            MIGRATE_STATUS=$(php artisan migrate:status --no-interaction 2>/dev/null || echo "ERROR")
            
            if [ "$MIGRATE_STATUS" != "ERROR" ] && echo "$MIGRATE_STATUS" | grep -q "No"; then
              echo "üóÑÔ∏è Ejecutando migraciones pendientes..."
              php artisan migrate --force --no-interaction
            else
              echo "‚úÖ No hay migraciones pendientes"
            fi
            
            # Build assets
            echo "üèóÔ∏è Construyendo assets..."
            npm run build
            
            # Limpieza de cache
            echo "üßπ Limpiando cache..."
            php artisan config:clear || echo "‚ö†Ô∏è Warning: config:clear fall√≥"
            php artisan route:clear || echo "‚ö†Ô∏è Warning: route:clear fall√≥"
            php artisan view:clear || echo "‚ö†Ô∏è Warning: view:clear fall√≥"
            
            # Optimizaci√≥n
            echo "‚ö° Optimizando para producci√≥n..."
            php artisan config:cache || echo "‚ö†Ô∏è Warning: config:cache fall√≥"
            php artisan route:cache || echo "‚ö†Ô∏è Warning: route:cache fall√≥"
            php artisan view:cache || echo "‚ö†Ô∏è Warning: view:cache fall√≥"
            
            # Storage link
            php artisan storage:link 2>/dev/null || echo "‚ö†Ô∏è storage:link ya existe o fall√≥"
            
            # Permisos
            echo "üîê Estableciendo permisos..."
            mkdir -p storage/framework/{cache,sessions,views} bootstrap/cache 2>/dev/null || true
            chmod -R 775 storage bootstrap/cache 2>/dev/null || echo "‚ö†Ô∏è Warning: chmod fall√≥"
            
            # Opcional: Recargar PHP-FPM (solo si tienes permisos)
            echo "üîÅ Intentando recargar PHP-FPM..."
            sudo systemctl reload php8.3-fpm 2>/dev/null || \
            sudo systemctl reload php8.2-fpm 2>/dev/null || \
            sudo systemctl reload php-fpm 2>/dev/null || \
            echo "‚ö†Ô∏è No se pudo recargar PHP-FPM (normal si no tienes permisos sudo)"
            
            echo "‚úÖ Deploy completado exitosamente!"