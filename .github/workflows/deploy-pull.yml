name: Deploy (pull) Laravel + React/Vite
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy por SSH (pull en servidor)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script_stop: true
          script: |
            # Funci√≥n para debug
            debug_step() {
              echo "üîç DEBUG: Ejecutando - $1"
              if eval "$1"; then
                echo "‚úÖ DEBUG: $1 - EXITOSO"
                return 0
              else
                local exit_code=$?
                echo "‚ùå DEBUG: $1 - FALL√ì (exit code: $exit_code)"
                return $exit_code
              fi
            }
            
            set -e
            cd "/var/www/ViajesRoxanaWeb"

            echo "üöÄ Iniciando deploy..."
            echo "üìç Directorio actual: $(pwd)"

            echo "üîç Verificando herramientas..."
            node --version || echo "‚ùå Node.js no encontrado"
            npm --version || echo "‚ùå npm no encontrado"  
            composer --version || echo "‚ùå Composer no encontrado"

            # Evitar interferencias con Git
            unset GIT_DIR GIT_WORK_TREE

            # Asegurar repo
            debug_step "git rev-parse --is-inside-work-tree"

            # Stash si hay cambios locales
            echo "üîç DEBUG: Verificando cambios locales..."
            STASHED=0
            if [ -n "$(git status --porcelain 2>/dev/null)" ]; then
              echo "‚ö†Ô∏è Cambios sin commitear, haciendo stash..."
              debug_step "git stash push --include-untracked"
              STASHED=1
            else
              echo "‚úÖ No hay cambios locales"
            fi

            # Pull limpio
            echo "üîÑ Haciendo git pull..."
            debug_step "git fetch origin main"
            debug_step "git checkout main"  
            debug_step "git pull --ff-only origin main"
            echo "‚úÖ Pull OK"

            # Calcular archivos cambiados - CON DEBUG DETALLADO
            echo "üîç DEBUG: Calculando archivos cambiados..."
            set +e
            
            echo "üîç DEBUG: Verificando HEAD@{1}..."
            if git show HEAD@{1} --name-only >/dev/null 2>&1; then
              echo "‚úÖ DEBUG: HEAD@{1} existe"
              CHANGED=$(git diff --name-only HEAD@{1} HEAD 2>/dev/null)
              if [ $? -eq 0 ]; then
                echo "‚úÖ DEBUG: git diff exitoso"
              else
                echo "‚ùå DEBUG: git diff fall√≥"
                CHANGED="__ALL__"
              fi
            else
              echo "‚ö†Ô∏è DEBUG: HEAD@{1} no existe, usando __ALL__"
              CHANGED="__ALL__"
            fi
            
            set -e
            echo "üóÇÔ∏è Cambios detectados:"
            printf '%s\n' "$CHANGED" | sed 's/^/  - /'

            # Restaurar stash si es necesario - CON DEBUG
            echo "üîç DEBUG: Verificando stash..."
            CHANGED_LOCAL=""
            if [ "$STASHED" = "1" ]; then
              echo "‚Ü©Ô∏è Restaurando cambios del stash..."
              debug_step "git stash pop"
              set +e
              CHANGED_LOCAL=$(git diff --name-only HEAD 2>/dev/null)
              set -e
              echo "üîç DEBUG: Cambios locales: $CHANGED_LOCAL"
            fi

            # Verificar si necesita Composer
            echo "üîç DEBUG: Verificando necesidad de Composer..."
            if printf '%s\n%s\n' "$CHANGED" "$CHANGED_LOCAL" | grep -E -q '(^|/)composer\.json|(^|/)composer\.lock|^__ALL__$'; then
              echo "üì¶ Composer install..."
              export COMPOSER_ALLOW_SUPERUSER=1
              debug_step "composer install --no-dev --optimize-autoloader --no-interaction"
            else
              echo "‚úÖ Composer sin cambios"
            fi

            # Verificar si necesita npm
            echo "üîç DEBUG: Verificando necesidad de npm..."
            if printf '%s\n%s\n' "$CHANGED" "$CHANGED_LOCAL" | grep -E -q '(^|/)package\.json|(^|/)package-lock\.json|^__ALL__$'; then
              echo "üì¶ npm deps..."
              if [ -f package-lock.json ]; then 
                debug_step "npm ci"
              else 
                debug_step "npm install"
              fi
            else
              echo "‚úÖ npm sin cambios"
            fi

            # Migraciones - CON DEBUG DETALLADO
            echo "üîç DEBUG: Verificando migraciones..."
            set +e
            MIGRATE_OUTPUT=$(php artisan migrate:status --no-interaction 2>&1)
            MIGRATE_EXIT=$?
            echo "üîç DEBUG: migrate:status exit code: $MIGRATE_EXIT"
            echo "üîç DEBUG: migrate:status output: $MIGRATE_OUTPUT"
            
            if [ $MIGRATE_EXIT -eq 0 ] && echo "$MIGRATE_OUTPUT" | grep -q "No"; then
              echo "üóÑÔ∏è Ejecutando migraciones..."
              set -e
              debug_step "php artisan migrate --force --no-interaction"
            else
              echo "‚úÖ No hay migraciones pendientes o comando fall√≥"
              set -e
            fi

            # Build Vite
            echo "üîç DEBUG: Construyendo assets..."
            debug_step "npm run build"

            # Cache operations - SIN ERRORES CR√çTICOS
            echo "üßπ Limpiando cache..."
            php artisan config:clear || echo "‚ö†Ô∏è config:clear fall√≥"
            php artisan route:clear || echo "‚ö†Ô∏è route:clear fall√≥"  
            php artisan view:clear || echo "‚ö†Ô∏è view:clear fall√≥"

            echo "‚ö° Optimizando..."
            php artisan config:cache || echo "‚ö†Ô∏è config:cache fall√≥"
            php artisan route:cache || echo "‚ö†Ô∏è route:cache fall√≥"
            php artisan view:cache || echo "‚ö†Ô∏è view:cache fall√≥"
            php artisan storage:link || echo "‚ö†Ô∏è storage:link fall√≥"

            # Permisos - SIN ERRORES CR√çTICOS
            echo "üîê Estableciendo permisos..."
            mkdir -p storage/framework/{cache,sessions,views} bootstrap/cache || echo "‚ö†Ô∏è mkdir fall√≥"
            chmod -R 775 storage bootstrap/cache || echo "‚ö†Ô∏è chmod fall√≥"
            chown -R www-data:www-data storage bootstrap/cache || echo "‚ö†Ô∏è chown fall√≥ (normal si no eres root)"

            # PHP-FPM - SIN ERRORES CR√çTICOS  
            echo "üîÅ Recargando PHP-FPM..."
            systemctl reload php8.3-fpm || systemctl reload php8.2-fpm || systemctl reload php-fpm || echo "‚ö†Ô∏è No se pudo recargar PHP-FPM"

            echo "‚úÖ Deploy completado exitosamente!"
